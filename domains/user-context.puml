' ========================
' 人员管理上下文
' ========================
package "User Management" as UC  {
    class User <<AggregateRoot>> {
        - userId: String
        - profile: UserProfile
        - userType: Set<UserType>
        - qualifications: Set<Qualification>
        - serviceGroupRoles: Set<ServiceGroupRole>
        - teams: String
        - registrationTime: DateTime
        - lastLogin: DateTime
        - updateTime: DateTime
        + register()
        + login()
        + deleteAccount()
        + requestQualificationReview(UserType)
        + joinTeam(teamId)
        + leaveTeam(teamId)
    }

    class UserProfile <<ValueObject>> {
        - name: String
        - introduction: String
        - contactInfo: ContactInformation
        - timezone: String
        - avatarUrl: String
        - visibility: MemberVisibility
        - externalIdentifiers: Map<IdentifierType, String>
        + update()
    }

    enum MemberVisibility {
        PUBLIC
        PRIVATE
    }

    enum IdentifierType {
        GITHUB_ID
        LINKEDIN_ID
        GOOGLE_ID
    }

    enum LanguagePreference <<ValueObject>> {
        ZH_CN
        EN_US
        JA_JP
    }

    class ContactInformation <<ValueObject>> {
        - email: String
        - phone: String
        - wechat: String
    }

    enum UserType {
        NEWBIE
        EXPERIENCED_TALENT
        STARTUP_SPIRIT
        SERVICE_MEMBER
    }

    class Qualification <<Entity>> {
        - qualificationId: String
        - auditRecordId: String
        + isValid(): boolean
    }

    ' ----- Service Group Subdomain -----
    class ServiceGroupMember <<Entity>> {
        - memberId: String
        - role: ServiceGroupRoleType
        - activeProjects: Set<ProjectId>
        + verifyProject(projectId)
        + inviteUser(userId)
        + reviewQualifications(userId)
    }

    enum ServiceGroupRoleType {
        PROJECT_LEADER
        TECH_LEAD
        MARKETING_LEAD
        OPERATIONS_LEAD
        FINANCE_LEGAL
    }

    ' ----- Relationships -----
    User "1" *-- "1" UserProfile : contains >
    UserProfile "1" *-- "1" ContactInformation : contains >
    UserProfile "1" *-- "1" LanguagePreference : has >
    User "1" --> "0..*" Qualification : maintains >
    User "1" --> "0..*" ServiceGroupMember : can become >
    ServiceGroupMember "1" --> "0..*" User : verifies >
    ServiceGroupMember "1" --> "0..*" ServiceGroupInvitation : sends >
    ServiceGroupInvitation "1" --> "0..*" User : receive >

    ' ----- Domain Events -----
    class QualificationReviewed <<DomainEvent>> {
        + qualificationId: String
        + userId: String
        + reviewRecordId: String
        + result: ReviewResult
    }

    class ServiceGroupInvitation <<DomainEvent>> {
        + inviterId: String
        + inviteeId: String
        + roleType: ServiceGroupRoleType
    }

    ' ----- Cross-Context Integration -----
    interface AuditService <<DomainService>> {
        + logUserAction(userId: String, action: String)
        + trackQualificationStatus(userId: String)
    }

    User ..> AuditService : depends on
}
